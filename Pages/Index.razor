@page "/"
@using System;
@using System.Linq;
@using System.Xml;
@{
    var dbcontext = new BlazorServerArcane.Models.ArcaneContext();
    var craftingItemsStart = dbcontext.CraftingItems.ToList();
    var craftingItems = craftingItemsStart.OrderBy(x => x.CategoryId).ThenBy(x => x.ItemTypeId).ToList();
}

@code{
    private int numDropdowns = 0;

    private List<string> dropdownValues = new List<string>();

    private string resultCraftingItem;

    private List<int> countValues = new List<int>();

    private string finalText = "";

    public void AddButton() {
        numDropdowns++;
        dropdownValues.Add("");
        countValues.Add(1);
    }
    public void DelButton() {
        if (numDropdowns > 0) {
            numDropdowns--;
            dropdownValues.RemoveAt(dropdownValues.Count - 1);
            countValues.RemoveAt(dropdownValues.Count - 1);
        }
    }
    public void SubmitButton() {
        XmlDocument doc = new XmlDocument();
        XmlNode docNode = doc.CreateXmlDeclaration("1.0", "UTF-8", null);
        doc.AppendChild(docNode);


        XmlNode craftableItemRequirements = doc.CreateElement("CraftableItemRequirements");
        XmlAttribute productAttribute1 = doc.CreateAttribute("xmlns:xsd");
        productAttribute1.Value = "http://www.w3.org/2001/XMLSchema";
        craftableItemRequirements.Attributes.Append(productAttribute1);
        XmlAttribute productAttribute2 = doc.CreateAttribute("xmlns:xsi");
        productAttribute2.Value = "http://www.w3.org/2001/XMLSchema-instance";
        craftableItemRequirements.Attributes.Append(productAttribute2);
        doc.AppendChild(craftableItemRequirements);

        XmlNode resultItem = doc.CreateElement("resultItem");
        craftableItemRequirements.AppendChild(resultItem);
        string[] info = resultCraftingItem.Split(' ');
        XmlNode category = doc.CreateElement("category");
        if (info.Length > 1) {
            category.AppendChild(doc.CreateTextNode(info[1]));
        }
        resultItem.AppendChild(category);
        XmlNode id = doc.CreateElement("id");
        if (info.Length > 0) {
            id.AppendChild(doc.CreateTextNode(info[0]));
        }
        resultItem.AppendChild(id);
        XmlNode itemTypeId = doc.CreateElement("itemTypeId");
        if (info.Length > 2) {
            itemTypeId.AppendChild(doc.CreateTextNode(info[2]));
        }
        resultItem.AppendChild(itemTypeId);
        XmlNode color1 = doc.CreateElement("color1");
        color1.AppendChild(doc.CreateTextNode("None"));
        resultItem.AppendChild(color1);
        XmlNode color2 = doc.CreateElement("color2");
        color2.AppendChild(doc.CreateTextNode("None"));
        resultItem.AppendChild(color2);
        XmlNode count = doc.CreateElement("count");
        count.AppendChild(doc.CreateTextNode("1"));
        resultItem.AppendChild(count);

        XmlNode combinationRequirements = doc.CreateElement("combinationRequirements");
        craftableItemRequirements.AppendChild(combinationRequirements);

        for (int i = 0; i < dropdownValues.Count; i++) {
            string[] infoArr = dropdownValues[i].Split(' ');
            XmlNode item = doc.CreateElement("Item");
            combinationRequirements.AppendChild(item);
            XmlNode categoryArr = doc.CreateElement("category");
            if (infoArr.Length > 1) {
                categoryArr.AppendChild(doc.CreateTextNode(infoArr[1]));
            }
            item.AppendChild(categoryArr);
            XmlNode idArr = doc.CreateElement("id");
            if (infoArr.Length > 0) {
                idArr.AppendChild(doc.CreateTextNode(infoArr[0]));
            }
            item.AppendChild(idArr);
            XmlNode itemTypeIdArr = doc.CreateElement("itemTypeId");
            if (infoArr.Length > 2) {
                itemTypeIdArr.AppendChild(doc.CreateTextNode(infoArr[2]));
            }
            item.AppendChild(itemTypeIdArr);
            XmlNode color1Arr = doc.CreateElement("color1");
            color1Arr.AppendChild(doc.CreateTextNode("None"));
            item.AppendChild(color1Arr);
            XmlNode color2Arr = doc.CreateElement("color2");
            color2Arr.AppendChild(doc.CreateTextNode("None"));
            item.AppendChild(color2Arr);
            XmlNode countArr = doc.CreateElement("count");
            countArr.AppendChild(doc.CreateTextNode(countValues[i] + ""));
            item.AppendChild(countArr);
        }
        finalText = doc.OuterXml;
    }

}

<form method="post">
    <p class="h3">Category & Type</p>
    <div class="form-row">
        <div class="form-group" id="dropdowns">
            <select @bind="@resultCraftingItem" id="inputCategoryAndType" class="form-control">
                @foreach (var item in craftingItems) {
                    <option>@item.CategoryId @item.Category @item.ItemTypeId @item.ItemType</option>
                }
            </select>
        </div>
    </div>
    <p class="h3">Crafting Ingredients</p>
    @for (int i = 0; i < numDropdowns; i++) {
        var localVar = i;
        <div class="form-row">
            <div class="form-group" id="dropdowns">
                <label for="inputCategoryAndType">Category & Type</label>
                <select @bind="@dropdownValues[localVar]" id="inputCraftingIngredient" class="form-control">
                    @foreach (var item in craftingItems) {
                        <option>@item.CategoryId @item.Category @item.ItemTypeId @item.ItemType</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="inputCount">Count:</label>
                <input @bind="@countValues[localVar]" type="number" class="form-control" id="inputNumber" aria-describedby="emailHelp" placeholder="1">
            </div>
        </div>
    }
    <input class="btn btn-secondary" @onclick="AddButton" type="button" value="Add Ingredient" />
    <input class="btn btn-secondary" @onclick="DelButton" type="button" value="Delete Ingredient" />
    <input class="btn btn-secondary" @onclick="SubmitButton" type="button" value="Submit" />
    <p>@finalText</p>
</form>
